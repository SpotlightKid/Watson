{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\n\nWatson is here to help you monitoring your time. You want to know how\nmuch time you are spending on your projects? You want to generate a nice\nreport for your client? Watson is here for you.\n\n\nTell Watson when you start working on a task with the \nstart\n command.\nThen, when you are done with this task, stop the timer with the \nstop\n\ncommand. This will create what we call a \nframe\n. That\u2019s pretty much\neverything you need to know to start using Watson.\n\n\nEach frame consists of the name of a project and some tags. Your tags\ncan be shared across projects and can be used to generate detailed\nreports.\n\n\nWatson stores everything on your computer, but you can go wild and use\n\ncrick.io\n to store\nyour sessions remotely and share it with your colleagues.\n\n\n\n\nInstallation\n\n\nWatson is available on any platform supported by Python (Windows, Mac,\nLinux, *BSD\u2026). The easiest way to install it is to use\n\npip\n:\n\n\n$ pip install td-watson\n\n\n\n\nDepending on your system, you might need to run this command with root privileges in order to install Watson globally.\n\n\nOn OS X, the easiest way to install Watson is using \nHomebrew\n:\n\n\n$ brew update && brew install watson\n\n\n\n\nDistribution packages\n\n\nYou can install Watson using available distribution packages.\n\n\nArch Linux\n\n\nA \nPKGBUILD\n file for building an Arch Linux package is available in the\n\nAUR\n. You can build and\ninstall it using the \nmakepkg\n\nor an \nAUR helper\n.\nPlease refer to the official documentation for more information on\ninstalling AUR packages.\n\n\nSingle user installation\n\n\nYou can choose to install Watson for your user only by running:\n\n\n$ pip install --user td-watson\n\n\n\n\nIf after this the \nwatson\n command is not available, you need to add \n~/.local/bin/\n to your \nPATH\n. If your terminal is Bash, you can do this by running:\n\n\n$ echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc  # Add ~/.local/bin/ to your .bashrc PATH\n\n\n\n\nand restarting your terminal session or sourcing the \n.bashrc\n:\n\n\n$ source ~/.bashrc  # Reload your .bashrc\n\n\n\n\nDevelopment version\n\n\nThe latest development version can be installed using the following commands:\n\n\n$ git clone https://github.com/TailorDev/Watson.git\n$ cd Watson/\n$ python setup.py install\n\n\n\n\nCommand line completion\n\n\nBash\n\n\nIf you use a Bash-compatible shell, you can install the \nwatson.completion\n file from the source distribution as \n/etc/bash.completion.d/watson\n - or wherever your distribution keeps the Bash completion configuration files. After you restart your shell, you can then just type \nwatson\n on your command line and then hit \nTAB\n to see all available commands. Depending on your input, it completes \nwatson\n commands, command options, projects, tags and frame IDs.\n\n\nZSH\n\n\nIf you use zsh, copy the file \nwatson.zsh-completion\n somewhere in your\n\nfpath\n as \n_watson\n. For example, you can put it in\n\n/usr/local/share/zsh/site-functions\n:\n\n\ncp watson.zsh-completion /usr/local/share/zsh/site-functions/_watson\n\n\n\nMake sure that your .zshrc enables compinit:\n\n\nautoload -Uz compinit && compinit\n\n\n\nGetting started\n\n\nNow that \nwatson\n is installed on your system, let\u2019s start tracking your activity:\n\n\n$ watson start world-domination +cats\n\n\n\n\nWith this command, you have started a new \nframe\n for the \nworld-domination\n project with the \ncat\n tag. Time is running. Now, you need to work on your project. Let\u2019s do this. Now.\n\n\n\n\nWelcome back! Now that your world domination plan has been set up, let\u2019s stop time tracking via:\n\n\n$ watson stop\nProject world-domination [cat] started 34 minutes ago (id: 166d1fb)\n\n\n\n\nTo list all available commands, either \nexplore the commands documentation\n or use:\n\n\n$ watson help\n\n\n\n\nWe hope you will enjoy Watson!",
            "title": "Home"
        },
        {
            "location": "/#overview",
            "text": "Watson is here to help you monitoring your time. You want to know how\nmuch time you are spending on your projects? You want to generate a nice\nreport for your client? Watson is here for you.  Tell Watson when you start working on a task with the  start  command.\nThen, when you are done with this task, stop the timer with the  stop \ncommand. This will create what we call a  frame . That\u2019s pretty much\neverything you need to know to start using Watson.  Each frame consists of the name of a project and some tags. Your tags\ncan be shared across projects and can be used to generate detailed\nreports.  Watson stores everything on your computer, but you can go wild and use crick.io  to store\nyour sessions remotely and share it with your colleagues.",
            "title": "Overview"
        },
        {
            "location": "/#installation",
            "text": "Watson is available on any platform supported by Python (Windows, Mac,\nLinux, *BSD\u2026). The easiest way to install it is to use pip :  $ pip install td-watson  Depending on your system, you might need to run this command with root privileges in order to install Watson globally.  On OS X, the easiest way to install Watson is using  Homebrew :  $ brew update && brew install watson",
            "title": "Installation"
        },
        {
            "location": "/#distribution-packages",
            "text": "You can install Watson using available distribution packages.  Arch Linux  A  PKGBUILD  file for building an Arch Linux package is available in the AUR . You can build and\ninstall it using the  makepkg \nor an  AUR helper .\nPlease refer to the official documentation for more information on\ninstalling AUR packages.",
            "title": "Distribution packages"
        },
        {
            "location": "/#single-user-installation",
            "text": "You can choose to install Watson for your user only by running:  $ pip install --user td-watson  If after this the  watson  command is not available, you need to add  ~/.local/bin/  to your  PATH . If your terminal is Bash, you can do this by running:  $ echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc  # Add ~/.local/bin/ to your .bashrc PATH  and restarting your terminal session or sourcing the  .bashrc :  $ source ~/.bashrc  # Reload your .bashrc",
            "title": "Single user installation"
        },
        {
            "location": "/#development-version",
            "text": "The latest development version can be installed using the following commands:  $ git clone https://github.com/TailorDev/Watson.git\n$ cd Watson/\n$ python setup.py install",
            "title": "Development version"
        },
        {
            "location": "/#command-line-completion",
            "text": "",
            "title": "Command line completion"
        },
        {
            "location": "/#bash",
            "text": "If you use a Bash-compatible shell, you can install the  watson.completion  file from the source distribution as  /etc/bash.completion.d/watson  - or wherever your distribution keeps the Bash completion configuration files. After you restart your shell, you can then just type  watson  on your command line and then hit  TAB  to see all available commands. Depending on your input, it completes  watson  commands, command options, projects, tags and frame IDs.",
            "title": "Bash"
        },
        {
            "location": "/#zsh",
            "text": "If you use zsh, copy the file  watson.zsh-completion  somewhere in your fpath  as  _watson . For example, you can put it in /usr/local/share/zsh/site-functions :  cp watson.zsh-completion /usr/local/share/zsh/site-functions/_watson  Make sure that your .zshrc enables compinit:  autoload -Uz compinit && compinit",
            "title": "ZSH"
        },
        {
            "location": "/#getting-started",
            "text": "Now that  watson  is installed on your system, let\u2019s start tracking your activity:  $ watson start world-domination +cats  With this command, you have started a new  frame  for the  world-domination  project with the  cat  tag. Time is running. Now, you need to work on your project. Let\u2019s do this. Now.   Welcome back! Now that your world domination plan has been set up, let\u2019s stop time tracking via:  $ watson stop\nProject world-domination [cat] started 34 minutes ago (id: 166d1fb)  To list all available commands, either  explore the commands documentation  or use:  $ watson help  We hope you will enjoy Watson!",
            "title": "Getting started"
        },
        {
            "location": "/user-guide/commands/",
            "text": "Commands\n\n\ncancel\n\n\nUsage:  watson cancel [OPTIONS]\n\n\n\n\nCancel the last call to the start command. The time will\nnot be recorded.\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nconfig\n\n\nUsage:  watson config [OPTIONS] SECTION.OPTION [VALUE]\n\n\n\n\nGet and set configuration options.\n\n\nIf value is not provided, the content of the key is displayed. Else,\nthe given value is set.\n\n\nYou can edit the config file with an editor with the \n--edit\n option.\n\n\nExample:\n\n\n$ watson config backend.token 7e329263e329\n$ watson config backend.token\n7e329263e329\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n-e, --edit\n\n\nEdit the configuration file with an editor.\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nedit\n\n\nUsage:  watson edit [OPTIONS] [ID]\n\n\n\n\nEdit a frame.\n\n\nYou can specify the frame to edit by its position or by its frame id.\nFor example, to edit the second-to-last frame, pass \n-2\n as the frame\nindex. You can get the id of a frame with the \nwatson log\n command.\n\n\nIf no id or index is given, the frame defaults to the current frame or the\nlast recorded frame, if no project is currently running.\n\n\nThe \n$EDITOR\n environment variable is used to detect your editor.\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nframes\n\n\nUsage:  watson frames [OPTIONS]\n\n\n\n\nDisplay the list of all frame IDs.\n\n\nExample:\n\n\n$ watson frames\nf1c4815\n9d1a989\n8801ec3\n[...]\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nhelp\n\n\nUsage:  watson help [OPTIONS] [COMMAND]\n\n\n\n\nDisplay help information\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nlog\n\n\nUsage:  watson log [OPTIONS]\n\n\n\n\nDisplay each recorded session during the given timespan.\n\n\nBy default, the sessions from the last 7 days are printed. This timespan\ncan be controlled with the \n--from\n and \n--to\n arguments. The dates\nmust have the format \nYEAR-MONTH-DAY\n, like: \n2014-05-19\n.\n\n\nYou can also use special shortcut options for easier timespan control:\n\n--day\n sets the log timespan to the current day (beginning at 00:00h)\nand \n--year\n, \n--month\n and \n--week\n to the current year, month or week\nrespectively.\n\n\nYou can limit the log to a project or a tag using the \n--project\n and\n\n--tag\n options. They can be specified several times each to add multiple\nprojects or tags to the log.\n\n\nExample:\n\n\n$ watson log --project voyager2 --project apollo11\nThursday 08 May 2015 (56m 33s)\n        f35bb24  09:26 to 10:22      56m 33s  apollo11  [reactor, brakes, steering, wheels, module]\n\nWednesday 07 May 2015 (27m 29s)\n        9a1325d  09:48 to 10:15      27m 29s  voyager2  [sensors, generators, probe]\n\nTuesday 06 May 2015 (1h 47m 22s)\n        530768b  12:40 to 14:16   1h 35m 45s  apollo11  [wheels]\n        84164f0  14:23 to 14:35      11m 37s  apollo11  [brakes, steering]\n\nMonday 05 May 2015 (8h 18m 26s)\n        26a2817  09:05 to 10:03      57m 12s  voyager2  [probe, generators]\n        5590aca  10:51 to 14:47   3h 55m 40s  apollo11\n        c32c74e  15:12 to 18:38   3h 25m 34s  voyager2  [probe, generators, sensors, antenna]\n\n$ watson log --from 2014-04-16 --to 2014-04-17\nThursday 17 April 2014 (4h 19m 13s)\n        a96fcde  09:15 to 09:43      28m 11s    hubble  [lens, camera, transmission]\n        5e91316  10:19 to 12:59   2h 39m 15s    hubble  [camera, transmission]\n        761dd51  14:42 to 15:54   1h 11m 47s  voyager1  [antenna]\n\nWednesday 16 April 2014 (5h 19m 18s)\n        02cb269  09:53 to 12:43   2h 50m 07s  apollo11  [wheels]\n        1070ddb  13:48 to 16:17   2h 29m 11s  voyager1  [antenna, sensors]\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n-c, --current / -C, --no-current\n\n\n(Don\u2019t) include currently running frame in output.\n\n\n\n\n\n\n-f, --from DATE\n\n\nThe date from when the log should start. Defaults to seven days ago.\n\n\n\n\n\n\n-t, --to DATE\n\n\nThe date at which the log should stop (inclusive). Defaults to tomorrow.\n\n\n\n\n\n\n-y, --year\n\n\nReports activity for the current year.\n\n\n\n\n\n\n-m, --month\n\n\nReports activity for the current month.\n\n\n\n\n\n\n-w, --week\n\n\nReports activity for the current week.\n\n\n\n\n\n\n-d, --day\n\n\nReports activity for the current day.\n\n\n\n\n\n\n-p, --project TEXT\n\n\nLogs activity only for the given project. You can add other projects by using this option several times.\n\n\n\n\n\n\n-T, --tag TEXT\n\n\nLogs activity only for frames containing the given tag. You can add several tags by using this option multiple times\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nmerge\n\n\nUsage:  watson merge [OPTIONS] FRAMES_WITH_CONFLICT\n\n\n\n\nPerform a merge of the existing frames with a conflicting frames file.\n\n\nWhen storing the frames on a file hosting service, there is the\npossibility that the frame file goes out-of-sync due to one or\nmore of the connected clients going offline. This can cause the\nframes to diverge.\n\n\nIf the \n--force\n command is specified, the merge operation\nwill automatically be performed.\n\n\nThe only argument is a path to the the conflicting \nframes\n file.\n\n\nMerge will output statistics about the merge operation.\n\n\nExample:\n\n\n$ watson merge frames-with-conflicts\n120 frames will be left unchanged\n12  frames will be merged\n3   frame conflicts need to be resolved\n\n\n\nTo perform a merge operation, the user will be prompted to\nselect the frame they would like to keep.\n\n\nExample:\n\n\n$ watson merge frames-with-conflicts --force\n120 frames will be left unchanged\n12  frames will be merged\n3   frame conflicts need to be resolved\nWill resolve conflicts:\nframe 8804872:\n< {\n<     \"project\": \"tailordev\",\n<     \"start\": \"2015-07-28 09:33:33\",\n<     \"stop\": \"2015-07-28 10:39:36\",\n<     \"tags\": [\n<         \"intern\",\n<         \"daily-meeting\"\n<     ]\n< }\n---\n> {\n>     \"project\": \"tailordev\",\n>     \"start\": \"2015-07-28 09:33:33\",\n>     \"stop\": \"**2015-07-28 11:39:36**\",\n>     \"tags\": [\n>         \"intern\",\n>         \"daily-meeting\"\n>     ]\n> }\nSelect the frame you want to keep: left or right? (L/r)\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n-f, --force\n\n\nIf specified, then the merge will automatically be performed.\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nprojects\n\n\nUsage:  watson projects [OPTIONS]\n\n\n\n\nDisplay the list of all the existing projects.\n\n\nExample:\n\n\n$ watson projects\napollo11\nhubble\nvoyager1\nvoyager2\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nremove\n\n\nUsage:  watson remove [OPTIONS] ID\n\n\n\n\nRemove a frame. You can specify the frame either by id or by position\n(ex: \n-1\n for the last frame).\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n-f, --force\n\n\nDon\u2019t ask for confirmation.\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nrename\n\n\nUsage:  watson rename [OPTIONS] TYPE OLD_NAME NEW_NAME\n\n\n\n\nRename a project or tag.\n\n\nExample:\n\n\n$ watson rename project read-python-intro learn-python\nRenamed project \"read-python-intro\" to \"learn-python\"\n$ watson rename tag company-meeting meeting\nRenamed tag \"company-meeting\" to \"meeting\"\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nreport\n\n\nUsage:  watson report [OPTIONS]\n\n\n\n\nDisplay a report of the time spent on each project.\n\n\nIf a project is given, the time spent on this project is printed.\nElse, print the total for each root project.\n\n\nBy default, the time spent the last 7 days is printed. This timespan\ncan be controlled with the \n--from\n and \n--to\n arguments. The dates\nmust have the format \nYEAR-MONTH-DAY\n, like: \n2014-05-19\n.\n\n\nYou can also use special shortcut options for easier timespan control:\n\n--day\n sets the report timespan to the current day (beginning at 00:00h)\nand \n--year\n, \n--month\n and \n--week\n to the current year, month or week\nrespectively.\n\n\nYou can limit the report to a project or a tag using the \n--project\n and\n\n--tag\n options. They can be specified several times each to add multiple\nprojects or tags to the report.\n\n\nExample:\n\n\n$ watson report\nMon 05 May 2014 -> Mon 12 May 2014\n\napollo11 - 13h 22m 20s\n        [brakes    7h 53m 18s]\n        [module    7h 41m 41s]\n        [reactor   8h 35m 50s]\n        [steering 10h 33m 37s]\n        [wheels   10h 11m 35s]\n\nhubble - 8h 54m 46s\n        [camera        8h 38m 17s]\n        [lens          5h 56m 22s]\n        [transmission  6h 27m 07s]\n\nvoyager1 - 11h 45m 13s\n        [antenna     5h 53m 57s]\n        [generators  9h 04m 58s]\n        [probe      10h 14m 29s]\n        [sensors    10h 30m 26s]\n\nvoyager2 - 16h 16m 09s\n        [antenna     7h 05m 50s]\n        [generators 12h 20m 29s]\n        [probe      12h 20m 29s]\n        [sensors    11h 23m 17s]\n\nTotal: 43h 42m 20s\n\n$ watson report --from 2014-04-01 --to 2014-04-30 --project apollo11\nTue 01 April 2014 -> Wed 30 April 2014\n\napollo11 - 13h 22m 20s\n        [brakes    7h 53m 18s]\n        [module    7h 41m 41s]\n        [reactor   8h 35m 50s]\n        [steering 10h 33m 37s]\n        [wheels   10h 11m 35s]\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n-c, --current / -C, --no-current\n\n\n(Don\u2019t) include currently running frame in report.\n\n\n\n\n\n\n-f, --from DATE\n\n\nThe date from when the report should start. Defaults to seven days ago.\n\n\n\n\n\n\n-t, --to DATE\n\n\nThe date at which the report should stop (inclusive). Defaults to tomorrow.\n\n\n\n\n\n\n-y, --year\n\n\nReports activity for the current year.\n\n\n\n\n\n\n-m, --month\n\n\nReports activity for the current month.\n\n\n\n\n\n\n-w, --week\n\n\nReports activity for the current week.\n\n\n\n\n\n\n-d, --day\n\n\nReports activity for the current day.\n\n\n\n\n\n\n-p, --project TEXT\n\n\nReports activity only for the given project. You can add other projects by using this option several times.\n\n\n\n\n\n\n-T, --tag TEXT\n\n\nReports activity only for frames containing the given tag. You can add several tags by using this option multiple times\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nrestart\n\n\nUsage:  watson restart [OPTIONS] [FRAME]\n\n\n\n\nRestart monitoring time for a previously stopped project.\n\n\nBy default, the project from the last frame, which was recorded, is\nrestarted, using the same tags as recorded in that frame. You can specify\nthe frame to use with an integer frame index argument or a frame ID. For\nexample, to restart the second-to-last frame, pass \n-2\n as the frame index.\n\n\nNormally, if a project is currently started, watson will print an error and\ndo nothing. If you set the configuration option \noptions.stop_on_restart\n\nto a true value (\n1\n, \non\n, \ntrue\n or \nyes\n), the current project, if any,\nwill be stopped before the new frame is started. You can pass the option\n\n-s\n or \n--stop\n resp. \n-S\n or \n--no-stop\n to override the default or\nconfigured behaviour.\n\n\nIf no previous frame exists or an invalid frame index or ID was given,\nan error is printed and no further action taken.\n\n\nExample:\n\n\n$ watson start apollo11 +module +brakes\nStarting project apollo11 [module, brakes] at 16:34\n$ watson stop\nStopping project apollo11, started a minute ago. (id: e7ccd52)\n$ watson restart\nStarting project apollo11 [module, brakes] at 16:36\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n-s, --stop / -S, --no-stop\n\n\n(Don\u2019t) Stop an already running project.\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nstart\n\n\nUsage:  watson start [OPTIONS] [ARGS]...\n\n\n\n\nStart monitoring time for the given project.\nYou can add tags indicating more specifically what you are working on with\n\n+tag\n.\n\n\nIf there is already a running project and the configuration option\n\noptions.stop_on_start\n is set to a true value (\n1\n, \non\n, \ntrue\n or\n\nyes\n), it is stopped before the new project is started.\n\n\nExample:\n\n\n$ watson start apollo11 +module +brakes\nStarting project apollo11 [module, brakes] at 16:34\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nstatus\n\n\nUsage:  watson status [OPTIONS]\n\n\n\n\nDisplay when the current project was started and the time spent since.\n\n\nYou can configure how the date and time of when the project was started are\ndisplayed by setting \noptions.date_format\n and \noptions.time_format\n in the\nconfiguration. The syntax of these formatting strings and the supported\nplaceholders are the same as for the \nstrftime\n method of Python\u2019s\n\ndatetime.datetime\n class.\n\n\nExample:\n\n\n$ watson status\nProject apollo11 [brakes] started seconds ago (2014-05-19 14:32:41+0100)\n$ watson config options.date_format %d.%m.%Y\n$ watson config options.time_format \"at %I:%M %p\"\n$ watson status\nProject apollo11 [brakes] started a minute ago (19.05.2014 at 02:32 PM)\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nstop\n\n\nUsage:  watson stop [OPTIONS]\n\n\n\n\nStop monitoring time for the current project.\n\n\nExample:\n\n\n$ watson stop\nStopping project apollo11, started a minute ago. (id: e7ccd52)\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\nsync\n\n\nUsage:  watson sync [OPTIONS]\n\n\n\n\nGet the frames from the server and push the new ones.\n\n\nThe URL of the server and the User Token must be defined via the\n\nwatson config\n command.\n\n\nExample:\n\n\n$ watson config backend.url http://localhost:4242\n$ watson config backend.token 7e329263e329\n$ watson sync\nReceived 42 frames from the server\nPushed 23 frames to the server\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.\n\n\n\n\n\n\n\n\ntags\n\n\nUsage:  watson tags [OPTIONS]\n\n\n\n\nDisplay the list of all the tags.\n\n\nExample:\n\n\n$ watson tags\nantenna\nbrakes\ncamera\ngenerators\nlens\nmodule\nprobe\nreactor\nsensors\nsteering\ntransmission\nwheels\n\n\n\nOptions\n\n\n\n\n\n\n\n\nFlag\n\n\nHelp\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nShow this message and exit.",
            "title": "Commands"
        },
        {
            "location": "/user-guide/commands/#commands",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/user-guide/commands/#cancel",
            "text": "Usage:  watson cancel [OPTIONS]  Cancel the last call to the start command. The time will\nnot be recorded.",
            "title": "cancel"
        },
        {
            "location": "/user-guide/commands/#options",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#config",
            "text": "Usage:  watson config [OPTIONS] SECTION.OPTION [VALUE]  Get and set configuration options.  If value is not provided, the content of the key is displayed. Else,\nthe given value is set.  You can edit the config file with an editor with the  --edit  option.  Example:  $ watson config backend.token 7e329263e329\n$ watson config backend.token\n7e329263e329",
            "title": "config"
        },
        {
            "location": "/user-guide/commands/#options_1",
            "text": "Flag  Help      -e, --edit  Edit the configuration file with an editor.    --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#edit",
            "text": "Usage:  watson edit [OPTIONS] [ID]  Edit a frame.  You can specify the frame to edit by its position or by its frame id.\nFor example, to edit the second-to-last frame, pass  -2  as the frame\nindex. You can get the id of a frame with the  watson log  command.  If no id or index is given, the frame defaults to the current frame or the\nlast recorded frame, if no project is currently running.  The  $EDITOR  environment variable is used to detect your editor.",
            "title": "edit"
        },
        {
            "location": "/user-guide/commands/#options_2",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#frames",
            "text": "Usage:  watson frames [OPTIONS]  Display the list of all frame IDs.  Example:  $ watson frames\nf1c4815\n9d1a989\n8801ec3\n[...]",
            "title": "frames"
        },
        {
            "location": "/user-guide/commands/#options_3",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#help",
            "text": "Usage:  watson help [OPTIONS] [COMMAND]  Display help information",
            "title": "help"
        },
        {
            "location": "/user-guide/commands/#options_4",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#log",
            "text": "Usage:  watson log [OPTIONS]  Display each recorded session during the given timespan.  By default, the sessions from the last 7 days are printed. This timespan\ncan be controlled with the  --from  and  --to  arguments. The dates\nmust have the format  YEAR-MONTH-DAY , like:  2014-05-19 .  You can also use special shortcut options for easier timespan control: --day  sets the log timespan to the current day (beginning at 00:00h)\nand  --year ,  --month  and  --week  to the current year, month or week\nrespectively.  You can limit the log to a project or a tag using the  --project  and --tag  options. They can be specified several times each to add multiple\nprojects or tags to the log.  Example:  $ watson log --project voyager2 --project apollo11\nThursday 08 May 2015 (56m 33s)\n        f35bb24  09:26 to 10:22      56m 33s  apollo11  [reactor, brakes, steering, wheels, module]\n\nWednesday 07 May 2015 (27m 29s)\n        9a1325d  09:48 to 10:15      27m 29s  voyager2  [sensors, generators, probe]\n\nTuesday 06 May 2015 (1h 47m 22s)\n        530768b  12:40 to 14:16   1h 35m 45s  apollo11  [wheels]\n        84164f0  14:23 to 14:35      11m 37s  apollo11  [brakes, steering]\n\nMonday 05 May 2015 (8h 18m 26s)\n        26a2817  09:05 to 10:03      57m 12s  voyager2  [probe, generators]\n        5590aca  10:51 to 14:47   3h 55m 40s  apollo11\n        c32c74e  15:12 to 18:38   3h 25m 34s  voyager2  [probe, generators, sensors, antenna]\n\n$ watson log --from 2014-04-16 --to 2014-04-17\nThursday 17 April 2014 (4h 19m 13s)\n        a96fcde  09:15 to 09:43      28m 11s    hubble  [lens, camera, transmission]\n        5e91316  10:19 to 12:59   2h 39m 15s    hubble  [camera, transmission]\n        761dd51  14:42 to 15:54   1h 11m 47s  voyager1  [antenna]\n\nWednesday 16 April 2014 (5h 19m 18s)\n        02cb269  09:53 to 12:43   2h 50m 07s  apollo11  [wheels]\n        1070ddb  13:48 to 16:17   2h 29m 11s  voyager1  [antenna, sensors]",
            "title": "log"
        },
        {
            "location": "/user-guide/commands/#options_5",
            "text": "Flag  Help      -c, --current / -C, --no-current  (Don\u2019t) include currently running frame in output.    -f, --from DATE  The date from when the log should start. Defaults to seven days ago.    -t, --to DATE  The date at which the log should stop (inclusive). Defaults to tomorrow.    -y, --year  Reports activity for the current year.    -m, --month  Reports activity for the current month.    -w, --week  Reports activity for the current week.    -d, --day  Reports activity for the current day.    -p, --project TEXT  Logs activity only for the given project. You can add other projects by using this option several times.    -T, --tag TEXT  Logs activity only for frames containing the given tag. You can add several tags by using this option multiple times    --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#merge",
            "text": "Usage:  watson merge [OPTIONS] FRAMES_WITH_CONFLICT  Perform a merge of the existing frames with a conflicting frames file.  When storing the frames on a file hosting service, there is the\npossibility that the frame file goes out-of-sync due to one or\nmore of the connected clients going offline. This can cause the\nframes to diverge.  If the  --force  command is specified, the merge operation\nwill automatically be performed.  The only argument is a path to the the conflicting  frames  file.  Merge will output statistics about the merge operation.  Example:  $ watson merge frames-with-conflicts\n120 frames will be left unchanged\n12  frames will be merged\n3   frame conflicts need to be resolved  To perform a merge operation, the user will be prompted to\nselect the frame they would like to keep.  Example:  $ watson merge frames-with-conflicts --force\n120 frames will be left unchanged\n12  frames will be merged\n3   frame conflicts need to be resolved\nWill resolve conflicts:\nframe 8804872:\n< {\n<     \"project\": \"tailordev\",\n<     \"start\": \"2015-07-28 09:33:33\",\n<     \"stop\": \"2015-07-28 10:39:36\",\n<     \"tags\": [\n<         \"intern\",\n<         \"daily-meeting\"\n<     ]\n< }\n---\n> {\n>     \"project\": \"tailordev\",\n>     \"start\": \"2015-07-28 09:33:33\",\n>     \"stop\": \"**2015-07-28 11:39:36**\",\n>     \"tags\": [\n>         \"intern\",\n>         \"daily-meeting\"\n>     ]\n> }\nSelect the frame you want to keep: left or right? (L/r)",
            "title": "merge"
        },
        {
            "location": "/user-guide/commands/#options_6",
            "text": "Flag  Help      -f, --force  If specified, then the merge will automatically be performed.    --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#projects",
            "text": "Usage:  watson projects [OPTIONS]  Display the list of all the existing projects.  Example:  $ watson projects\napollo11\nhubble\nvoyager1\nvoyager2",
            "title": "projects"
        },
        {
            "location": "/user-guide/commands/#options_7",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#remove",
            "text": "Usage:  watson remove [OPTIONS] ID  Remove a frame. You can specify the frame either by id or by position\n(ex:  -1  for the last frame).",
            "title": "remove"
        },
        {
            "location": "/user-guide/commands/#options_8",
            "text": "Flag  Help      -f, --force  Don\u2019t ask for confirmation.    --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#rename",
            "text": "Usage:  watson rename [OPTIONS] TYPE OLD_NAME NEW_NAME  Rename a project or tag.  Example:  $ watson rename project read-python-intro learn-python\nRenamed project \"read-python-intro\" to \"learn-python\"\n$ watson rename tag company-meeting meeting\nRenamed tag \"company-meeting\" to \"meeting\"",
            "title": "rename"
        },
        {
            "location": "/user-guide/commands/#options_9",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#report",
            "text": "Usage:  watson report [OPTIONS]  Display a report of the time spent on each project.  If a project is given, the time spent on this project is printed.\nElse, print the total for each root project.  By default, the time spent the last 7 days is printed. This timespan\ncan be controlled with the  --from  and  --to  arguments. The dates\nmust have the format  YEAR-MONTH-DAY , like:  2014-05-19 .  You can also use special shortcut options for easier timespan control: --day  sets the report timespan to the current day (beginning at 00:00h)\nand  --year ,  --month  and  --week  to the current year, month or week\nrespectively.  You can limit the report to a project or a tag using the  --project  and --tag  options. They can be specified several times each to add multiple\nprojects or tags to the report.  Example:  $ watson report\nMon 05 May 2014 -> Mon 12 May 2014\n\napollo11 - 13h 22m 20s\n        [brakes    7h 53m 18s]\n        [module    7h 41m 41s]\n        [reactor   8h 35m 50s]\n        [steering 10h 33m 37s]\n        [wheels   10h 11m 35s]\n\nhubble - 8h 54m 46s\n        [camera        8h 38m 17s]\n        [lens          5h 56m 22s]\n        [transmission  6h 27m 07s]\n\nvoyager1 - 11h 45m 13s\n        [antenna     5h 53m 57s]\n        [generators  9h 04m 58s]\n        [probe      10h 14m 29s]\n        [sensors    10h 30m 26s]\n\nvoyager2 - 16h 16m 09s\n        [antenna     7h 05m 50s]\n        [generators 12h 20m 29s]\n        [probe      12h 20m 29s]\n        [sensors    11h 23m 17s]\n\nTotal: 43h 42m 20s\n\n$ watson report --from 2014-04-01 --to 2014-04-30 --project apollo11\nTue 01 April 2014 -> Wed 30 April 2014\n\napollo11 - 13h 22m 20s\n        [brakes    7h 53m 18s]\n        [module    7h 41m 41s]\n        [reactor   8h 35m 50s]\n        [steering 10h 33m 37s]\n        [wheels   10h 11m 35s]",
            "title": "report"
        },
        {
            "location": "/user-guide/commands/#options_10",
            "text": "Flag  Help      -c, --current / -C, --no-current  (Don\u2019t) include currently running frame in report.    -f, --from DATE  The date from when the report should start. Defaults to seven days ago.    -t, --to DATE  The date at which the report should stop (inclusive). Defaults to tomorrow.    -y, --year  Reports activity for the current year.    -m, --month  Reports activity for the current month.    -w, --week  Reports activity for the current week.    -d, --day  Reports activity for the current day.    -p, --project TEXT  Reports activity only for the given project. You can add other projects by using this option several times.    -T, --tag TEXT  Reports activity only for frames containing the given tag. You can add several tags by using this option multiple times    --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#restart",
            "text": "Usage:  watson restart [OPTIONS] [FRAME]  Restart monitoring time for a previously stopped project.  By default, the project from the last frame, which was recorded, is\nrestarted, using the same tags as recorded in that frame. You can specify\nthe frame to use with an integer frame index argument or a frame ID. For\nexample, to restart the second-to-last frame, pass  -2  as the frame index.  Normally, if a project is currently started, watson will print an error and\ndo nothing. If you set the configuration option  options.stop_on_restart \nto a true value ( 1 ,  on ,  true  or  yes ), the current project, if any,\nwill be stopped before the new frame is started. You can pass the option -s  or  --stop  resp.  -S  or  --no-stop  to override the default or\nconfigured behaviour.  If no previous frame exists or an invalid frame index or ID was given,\nan error is printed and no further action taken.  Example:  $ watson start apollo11 +module +brakes\nStarting project apollo11 [module, brakes] at 16:34\n$ watson stop\nStopping project apollo11, started a minute ago. (id: e7ccd52)\n$ watson restart\nStarting project apollo11 [module, brakes] at 16:36",
            "title": "restart"
        },
        {
            "location": "/user-guide/commands/#options_11",
            "text": "Flag  Help      -s, --stop / -S, --no-stop  (Don\u2019t) Stop an already running project.    --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#start",
            "text": "Usage:  watson start [OPTIONS] [ARGS]...  Start monitoring time for the given project.\nYou can add tags indicating more specifically what you are working on with +tag .  If there is already a running project and the configuration option options.stop_on_start  is set to a true value ( 1 ,  on ,  true  or yes ), it is stopped before the new project is started.  Example:  $ watson start apollo11 +module +brakes\nStarting project apollo11 [module, brakes] at 16:34",
            "title": "start"
        },
        {
            "location": "/user-guide/commands/#options_12",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#status",
            "text": "Usage:  watson status [OPTIONS]  Display when the current project was started and the time spent since.  You can configure how the date and time of when the project was started are\ndisplayed by setting  options.date_format  and  options.time_format  in the\nconfiguration. The syntax of these formatting strings and the supported\nplaceholders are the same as for the  strftime  method of Python\u2019s datetime.datetime  class.  Example:  $ watson status\nProject apollo11 [brakes] started seconds ago (2014-05-19 14:32:41+0100)\n$ watson config options.date_format %d.%m.%Y\n$ watson config options.time_format \"at %I:%M %p\"\n$ watson status\nProject apollo11 [brakes] started a minute ago (19.05.2014 at 02:32 PM)",
            "title": "status"
        },
        {
            "location": "/user-guide/commands/#options_13",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#stop",
            "text": "Usage:  watson stop [OPTIONS]  Stop monitoring time for the current project.  Example:  $ watson stop\nStopping project apollo11, started a minute ago. (id: e7ccd52)",
            "title": "stop"
        },
        {
            "location": "/user-guide/commands/#options_14",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#sync",
            "text": "Usage:  watson sync [OPTIONS]  Get the frames from the server and push the new ones.  The URL of the server and the User Token must be defined via the watson config  command.  Example:  $ watson config backend.url http://localhost:4242\n$ watson config backend.token 7e329263e329\n$ watson sync\nReceived 42 frames from the server\nPushed 23 frames to the server",
            "title": "sync"
        },
        {
            "location": "/user-guide/commands/#options_15",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/commands/#tags",
            "text": "Usage:  watson tags [OPTIONS]  Display the list of all the tags.  Example:  $ watson tags\nantenna\nbrakes\ncamera\ngenerators\nlens\nmodule\nprobe\nreactor\nsensors\nsteering\ntransmission\nwheels",
            "title": "tags"
        },
        {
            "location": "/user-guide/commands/#options_16",
            "text": "Flag  Help      --help  Show this message and exit.",
            "title": "Options"
        },
        {
            "location": "/user-guide/configuration/",
            "text": "Configuration\n\n\nThe configuration file\n\n\nWatson configuration and data are stored inside your user\u2019s application folder. Depending on your system, the default path might be:\n\n\n\n\nMacOSX\n: \n~/Library/Application Support/watson/config\n\n\nWindows\n: \nC:\\Users\\<user>\\AppData\\Local\\watson\\config\n\n\nLinux\n: \n~/.config/watson/config\n\n\n\n\nThe configuration file is a typical \npython configuration (INI) file\n, that looks like:\n\n\n[Simple Values]\nkey=value\nspaces in keys=allowed\nspaces in values=allowed as well\nspaces around the delimiter = obviously\nyou can also use : to delimit keys from values\n\n[All Values Are Strings]\nvalues like this: 1000000\nor this: 3.14159265359\nare they treated as numbers? : no\nintegers, floats and booleans are held as: strings\ncan use the API to get converted values directly: true\n\n[Multiline Values]\nchorus: I'm a lumberjack, and I'm okay\n    I sleep all night and I work all day\n\n\n[No Values]\nkey_without_value\nempty string value here =\n\n[You can use comments]\n# like this\n; or this\n\n# By default only in an empty line.\n# Inline comments can be harmful because they prevent users\n# from using the delimiting characters as parts of values.\n# That being said, this can be customized.\n\n    [Sections Can Be Indented]\n        can_values_be_as_well = True\n        does_that_mean_anything_special = False\n        purpose = formatting for readability\n        multiline_values = are\n            handled just fine as\n            long as they are indented\n            deeper than the first line\n            of a value\n        # Did I mention we can indent comments, too?\n\n\n\n\nThis example configuration file has been taken from the \nofficial python documentation\n.\n\n\nEditing\n\n\nIf you want to edit your configuration, the best is to use the \nconfig\n command.\n\n\nYou can edit your configuration on the fly with:\n\n\n$ watson config SECTION.KEY VALUE\n\n\n\n\nExample:\n\n\n$ watson config backend.token 7e329263e329  # set configuration\n$ watson config backend.token  # display configuration\n7e329263e329\n\n\n\n\nOr open an editor with:\n\n\n$ watson config -e\n\n\n\n\nAvailable settings\n\n\nBackend\n\n\nAt this time there is no official backend for Watson. We are working on it. But in a near future, you will be able to synchronize Watson with a public (or your private) repository via the \nsync\n command. To configure your repository please set up the \n[backend]\n section.\n\n\nbackend.url\n\n\nThis is the API root url of your repository, e.g. \nhttps://my.server.com/api/\n\n\nbackend.token\n\n\nTo authenticate watson as an API client, once generated, you will need to set up your API token in your configuration, e.g. \n7e329263e329\n.\n\n\nOptions\n\n\noptions.log_current\n\n\nIf \ntrue\n, the output of the \nlog\n command will include the currently running\nframe (if any) by default. The option can be overridden on the command line\nwith the \n-c/-C\n resp. \n--current/--no-current\n flags.\n\n\noptions.report_current\n\n\nIf \ntrue\n, the output of the \nreport\n command will include the currently\nrunning frame (if any) by default. The option can be overridden on the\ncommand line with the \n-c/-C\n resp. \n--current/--no-current\n flags.\n\n\noptions.stop_on_start\n\n\nIf \ntrue\n, starting a new project will stop running projects:\n\n\n$ watson start samourai +pizza +cat\nStarting project samourai [pizza, cat] at 11:14\n$ watson start jayce +wheeled +warriors\nStopping project samourai [pizza, cat], started 2 minutes ago. (id: d08cdd0)\nStarting project jayce [wheeled, warriors] at 11:16\n\n\n\n\nPlease, note that it also works with serious stuffs like:\n\n\n$ watson start voyager2 +reactor +module\nStopping project jayce [wheeled, warriors], started 2 minutes ago. (id: 967965f)\nStarting project voyager2 [reactor, module] at 11:18\n\n\n\n\noptions.stop_on_restart\n\n\nSimilar to the \noptions.stop_on_start\n option, but for the \nrestart\n command.\n\n\noptions.date_format\n\n\nGlobally configure how \ndates\n should be formatted. All \npython\u2019s \nstrftime\n directives\n are supported.\n\n\noptions.time_format\n\n\nGlobally configure how \ntime\n should be formatted. All \npython\u2019s \nstrftime\n directives\n are supported.\n\n\nDefault tags\n\n\nTags can be automatically added for selected projects. This is convenient when\nthe same tags are always attached to a particular project.\n\n\nThese automatically attached tags are defined in the \n[default_tags]\n section\nof the configuration. Each option in that section is a project to which\ntags should be attached. The entries should follow the pattern: \nproject = tag1 tag2\n.\n\n\nYou can set default tags for a project from the command line:\n\n\n$ watson config default_tags.python101 'teaching python'\n\n\n\n\nThis corresponds to the following configuration file snippets:\n\n\n[default_tags]\npython101 = teaching python\n\n\n\n\nWith these default tags set, the tags \u201cteaching\u201d and \u201cpython\u201d will\nautomatically be attached to the project \u201cpython101\u201d:\n\n\n$ watson start python101\nStarting project python101 [teaching, python] at 19:27\n\n$ watson start python101 +lecture\nStarting project python101 [lecture, teaching, python] at 19:28\n\n\n\n\nDefault tags can contain space characters when written in between quotes:\n\n\n$ watson config default_tags.voyager2 'nasa \"space mission\"'\n\n\n\n\nOr in the configuration file:\n\n\n[default_tags]\nvoyager2 = nasa 'space mission'\n\n\n\n\nSample configuration file\n\n\nA basic configuration file looks like the following:\n\n\n# Watson configuration\n\n[backend]\nurl = https://api.crick.fr\ntoken = yourapitoken\n\n[options]\nstop_on_start = true\nstop_on_restart = false\ndate_format = %Y.%m.%d\ntime_format = %H:%M:%S%z\nlog_current = false\nreport_current = false\n\n\n\n\nApplication folder\n\n\nTo override Watson\u2019s default application folder (see first section), you can set the \n$WATSON_DIR\n environment variable to the desired path.\n\n\nIt may be defined globally in your shell profile:\n\n\n# .bashrc or .profile\nexport WATSON_DIR=/path/to/watson/folder\n\n\n\n\nor when calling Watson:\n\n\n$ WATSON_DIR=/path/to/watson/folder watson status\n\n\n\n\nThis can be useful to preserve your real data when hacking with Watson :)",
            "title": "Configuration"
        },
        {
            "location": "/user-guide/configuration/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/user-guide/configuration/#the-configuration-file",
            "text": "Watson configuration and data are stored inside your user\u2019s application folder. Depending on your system, the default path might be:   MacOSX :  ~/Library/Application Support/watson/config  Windows :  C:\\Users\\<user>\\AppData\\Local\\watson\\config  Linux :  ~/.config/watson/config   The configuration file is a typical  python configuration (INI) file , that looks like:  [Simple Values]\nkey=value\nspaces in keys=allowed\nspaces in values=allowed as well\nspaces around the delimiter = obviously\nyou can also use : to delimit keys from values\n\n[All Values Are Strings]\nvalues like this: 1000000\nor this: 3.14159265359\nare they treated as numbers? : no\nintegers, floats and booleans are held as: strings\ncan use the API to get converted values directly: true\n\n[Multiline Values]\nchorus: I'm a lumberjack, and I'm okay\n    I sleep all night and I work all day\n\n\n[No Values]\nkey_without_value\nempty string value here =\n\n[You can use comments]\n# like this\n; or this\n\n# By default only in an empty line.\n# Inline comments can be harmful because they prevent users\n# from using the delimiting characters as parts of values.\n# That being said, this can be customized.\n\n    [Sections Can Be Indented]\n        can_values_be_as_well = True\n        does_that_mean_anything_special = False\n        purpose = formatting for readability\n        multiline_values = are\n            handled just fine as\n            long as they are indented\n            deeper than the first line\n            of a value\n        # Did I mention we can indent comments, too?  This example configuration file has been taken from the  official python documentation .",
            "title": "The configuration file"
        },
        {
            "location": "/user-guide/configuration/#editing",
            "text": "If you want to edit your configuration, the best is to use the  config  command.  You can edit your configuration on the fly with:  $ watson config SECTION.KEY VALUE  Example:  $ watson config backend.token 7e329263e329  # set configuration\n$ watson config backend.token  # display configuration\n7e329263e329  Or open an editor with:  $ watson config -e",
            "title": "Editing"
        },
        {
            "location": "/user-guide/configuration/#available-settings",
            "text": "",
            "title": "Available settings"
        },
        {
            "location": "/user-guide/configuration/#backend",
            "text": "At this time there is no official backend for Watson. We are working on it. But in a near future, you will be able to synchronize Watson with a public (or your private) repository via the  sync  command. To configure your repository please set up the  [backend]  section.",
            "title": "Backend"
        },
        {
            "location": "/user-guide/configuration/#backendurl",
            "text": "This is the API root url of your repository, e.g.  https://my.server.com/api/",
            "title": "backend.url"
        },
        {
            "location": "/user-guide/configuration/#backendtoken",
            "text": "To authenticate watson as an API client, once generated, you will need to set up your API token in your configuration, e.g.  7e329263e329 .",
            "title": "backend.token"
        },
        {
            "location": "/user-guide/configuration/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/user-guide/configuration/#optionslog_current",
            "text": "If  true , the output of the  log  command will include the currently running\nframe (if any) by default. The option can be overridden on the command line\nwith the  -c/-C  resp.  --current/--no-current  flags.",
            "title": "options.log_current"
        },
        {
            "location": "/user-guide/configuration/#optionsreport_current",
            "text": "If  true , the output of the  report  command will include the currently\nrunning frame (if any) by default. The option can be overridden on the\ncommand line with the  -c/-C  resp.  --current/--no-current  flags.",
            "title": "options.report_current"
        },
        {
            "location": "/user-guide/configuration/#optionsstop_on_start",
            "text": "If  true , starting a new project will stop running projects:  $ watson start samourai +pizza +cat\nStarting project samourai [pizza, cat] at 11:14\n$ watson start jayce +wheeled +warriors\nStopping project samourai [pizza, cat], started 2 minutes ago. (id: d08cdd0)\nStarting project jayce [wheeled, warriors] at 11:16  Please, note that it also works with serious stuffs like:  $ watson start voyager2 +reactor +module\nStopping project jayce [wheeled, warriors], started 2 minutes ago. (id: 967965f)\nStarting project voyager2 [reactor, module] at 11:18",
            "title": "options.stop_on_start"
        },
        {
            "location": "/user-guide/configuration/#optionsstop_on_restart",
            "text": "Similar to the  options.stop_on_start  option, but for the  restart  command.",
            "title": "options.stop_on_restart"
        },
        {
            "location": "/user-guide/configuration/#optionsdate_format",
            "text": "Globally configure how  dates  should be formatted. All  python\u2019s  strftime  directives  are supported.",
            "title": "options.date_format"
        },
        {
            "location": "/user-guide/configuration/#optionstime_format",
            "text": "Globally configure how  time  should be formatted. All  python\u2019s  strftime  directives  are supported.",
            "title": "options.time_format"
        },
        {
            "location": "/user-guide/configuration/#default-tags",
            "text": "Tags can be automatically added for selected projects. This is convenient when\nthe same tags are always attached to a particular project.  These automatically attached tags are defined in the  [default_tags]  section\nof the configuration. Each option in that section is a project to which\ntags should be attached. The entries should follow the pattern:  project = tag1 tag2 .  You can set default tags for a project from the command line:  $ watson config default_tags.python101 'teaching python'  This corresponds to the following configuration file snippets:  [default_tags]\npython101 = teaching python  With these default tags set, the tags \u201cteaching\u201d and \u201cpython\u201d will\nautomatically be attached to the project \u201cpython101\u201d:  $ watson start python101\nStarting project python101 [teaching, python] at 19:27\n\n$ watson start python101 +lecture\nStarting project python101 [lecture, teaching, python] at 19:28  Default tags can contain space characters when written in between quotes:  $ watson config default_tags.voyager2 'nasa \"space mission\"'  Or in the configuration file:  [default_tags]\nvoyager2 = nasa 'space mission'",
            "title": "Default tags"
        },
        {
            "location": "/user-guide/configuration/#sample-configuration-file",
            "text": "A basic configuration file looks like the following:  # Watson configuration\n\n[backend]\nurl = https://api.crick.fr\ntoken = yourapitoken\n\n[options]\nstop_on_start = true\nstop_on_restart = false\ndate_format = %Y.%m.%d\ntime_format = %H:%M:%S%z\nlog_current = false\nreport_current = false",
            "title": "Sample configuration file"
        },
        {
            "location": "/user-guide/configuration/#application-folder",
            "text": "To override Watson\u2019s default application folder (see first section), you can set the  $WATSON_DIR  environment variable to the desired path.  It may be defined globally in your shell profile:  # .bashrc or .profile\nexport WATSON_DIR=/path/to/watson/folder  or when calling Watson:  $ WATSON_DIR=/path/to/watson/folder watson status  This can be useful to preserve your real data when hacking with Watson :)",
            "title": "Application folder"
        },
        {
            "location": "/contributing/how-to/",
            "text": "How to contribute?\n\n\nIf you are reading this, we thank you in advance for willing to\ncontribute to the Watson project! You are awesome.\n\n\n\n\nDisclaimer\n\n\nThis document is heavily inspired by \nKinto\u2019s project\ndocumentation\n. Thank Mozilla people\nfor providing such high quality content to the community.\n\n\n\n\nReport bugs\n\n\nReport bugs at \nhttps://github.com/TailorDev/Watson/issues/new\n\n\nIf you are reporting a bug, please include:\n\n\n\n\nAny details about your local setup that might be helpful in\n    troubleshooting.\n\n\nDetailed steps to reproduce the bug.\n\n\n\n\nFix bugs\n\n\nCheck out the \nopen bugs\n -\nanything tagged with the \n[easy-pick]\n label could be a good choice\nfor newcomers.\n\n\nImplement features\n\n\nLook through the GitHub issues for features. Anything tagged with\n\n[enhancement]\n is open to whoever wants to implement it.\n\n\nWrite documentation\n\n\nWatson\n could always use more documentation, whether as part of the\nofficial docs, in docstrings, or even on the Web in blog posts,\narticles, and such.\n\n\nSubmit feedback\n\n\nAny issue with the \n[question]\n label is open for feedback, so feel\nfree to share your thoughts with us!\n\n\nThe best way to send feedback is to \nfill a new\nissue\n on GitHub.\n\n\nIf you are proposing a feature:\n\n\n\n\nExplain how you envision it working. Try to be as detailed as you\n    can.\n\n\nTry to keep the scope as narrow as possible. This will help make it\n    easier to implement.\n\n\nFeel free to include any code you might already have, even if it\u2019s\n    just a rough idea. This is a volunteer-driven project, and\n    contributions are welcome :)",
            "title": "Howto"
        },
        {
            "location": "/contributing/how-to/#how-to-contribute",
            "text": "If you are reading this, we thank you in advance for willing to\ncontribute to the Watson project! You are awesome.   Disclaimer  This document is heavily inspired by  Kinto\u2019s project\ndocumentation . Thank Mozilla people\nfor providing such high quality content to the community.",
            "title": "How to contribute?"
        },
        {
            "location": "/contributing/how-to/#report-bugs",
            "text": "Report bugs at  https://github.com/TailorDev/Watson/issues/new  If you are reporting a bug, please include:   Any details about your local setup that might be helpful in\n    troubleshooting.  Detailed steps to reproduce the bug.",
            "title": "Report bugs"
        },
        {
            "location": "/contributing/how-to/#fix-bugs",
            "text": "Check out the  open bugs  -\nanything tagged with the  [easy-pick]  label could be a good choice\nfor newcomers.",
            "title": "Fix bugs"
        },
        {
            "location": "/contributing/how-to/#implement-features",
            "text": "Look through the GitHub issues for features. Anything tagged with [enhancement]  is open to whoever wants to implement it.",
            "title": "Implement features"
        },
        {
            "location": "/contributing/how-to/#write-documentation",
            "text": "Watson  could always use more documentation, whether as part of the\nofficial docs, in docstrings, or even on the Web in blog posts,\narticles, and such.",
            "title": "Write documentation"
        },
        {
            "location": "/contributing/how-to/#submit-feedback",
            "text": "Any issue with the  [question]  label is open for feedback, so feel\nfree to share your thoughts with us!  The best way to send feedback is to  fill a new\nissue  on GitHub.  If you are proposing a feature:   Explain how you envision it working. Try to be as detailed as you\n    can.  Try to keep the scope as narrow as possible. This will help make it\n    easier to implement.  Feel free to include any code you might already have, even if it\u2019s\n    just a rough idea. This is a volunteer-driven project, and\n    contributions are welcome :)",
            "title": "Submit feedback"
        },
        {
            "location": "/contributing/hack/",
            "text": "Hack\n\n\nReady to contribute? Here\u2019s how to set up \nWatson\n for local development.\n\n\nGet started!\n\n\n\n\nFork the \nWatson repository\n on GitHub.\n\n\n\n\nClone your fork locally:\n\n\n$ git clone git@github.com:your_name_here/Watson.git\n\n\n\n\n\n\n\nInstall Watson locally:\n\n\n$ mkvirtualenv watson\n$ cd Watson\n$ pip install -r requirements-tests.txt\n$ python setup.py develop\n\n\n\n\n\n\n\nCreate a branch for local development:\n\n\n$ git checkout -b name-of-your-bugfix-or-feature\n\n\n\nNow you can make your changes locally.\n\n\n\n\n\n\nWhen you\u2019re done making changes, check that your changes pass the tests\n    (see \nRun the tests\n):\n\n\n$ tox\n\n\n\n\n\n\n\nIf you have added a new command or updated/fixed docstrings, please update the documentation:\n\n\n$ make docs\n\n\n\n\n\n\n\nCommit your changes and push your branch to GitHub:\n\n\n$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push -u origin name-of-your-bugfix-or-feature\n\n\n\n\n\n\n\nAfter \nreading this\n, submit a pull request through the GitHub website.\n\n\n\n\n\n\n\n\nRun the tests\n\n\nThe tests use \npytest\n. To run them with the default Python\ninterpreter:\n\n\n$ py.test -v tests/\n\n\n\nTo run the tests via \ntox\n with all Python versions\nwhich are available on your system and are defined in the \ntox.ini\n file,\nsimply run:\n\n\n$ tox\n\n\n\nThis will also check the source code with \nflake8\n.",
            "title": "Hack"
        },
        {
            "location": "/contributing/hack/#hack",
            "text": "Ready to contribute? Here\u2019s how to set up  Watson  for local development.",
            "title": "Hack"
        },
        {
            "location": "/contributing/hack/#get-started",
            "text": "Fork the  Watson repository  on GitHub.   Clone your fork locally:  $ git clone git@github.com:your_name_here/Watson.git    Install Watson locally:  $ mkvirtualenv watson\n$ cd Watson\n$ pip install -r requirements-tests.txt\n$ python setup.py develop    Create a branch for local development:  $ git checkout -b name-of-your-bugfix-or-feature  Now you can make your changes locally.    When you\u2019re done making changes, check that your changes pass the tests\n    (see  Run the tests ):  $ tox    If you have added a new command or updated/fixed docstrings, please update the documentation:  $ make docs    Commit your changes and push your branch to GitHub:  $ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push -u origin name-of-your-bugfix-or-feature    After  reading this , submit a pull request through the GitHub website.",
            "title": "Get started!"
        },
        {
            "location": "/contributing/hack/#run-the-tests",
            "text": "The tests use  pytest . To run them with the default Python\ninterpreter:  $ py.test -v tests/  To run the tests via  tox  with all Python versions\nwhich are available on your system and are defined in the  tox.ini  file,\nsimply run:  $ tox  This will also check the source code with  flake8 .",
            "title": "Run the tests"
        },
        {
            "location": "/contributing/pr-guidelines/",
            "text": "Pull request guidelines\n\n\n\n\nnota bene\n\n\nOpen a pull-request even if your contribution is not ready yet! It can\nbe discussed and improved collaboratively! You may prefix the title of\nyour pull-request with \u201cWIP: \u201d to make it clear that it is not yet ready\nfor merging.\n\n\n\n\nBefore we merge a pull request, we check that it meets these guidelines:\n\n\n\n\nPlease, write \ncommit messages that make\n    sense\n,\n    and \nrebase your\n    branch\n before\n    submitting your pull request.\n\n\nOne may ask you to \nsquash your\n    commits\n\n    too. This is used to \u201cclean\u201d your pull request before merging it (we\n    don\u2019t want commits such as fix tests, fix 2, fix 3, etc.).\n\n\nWhile creating your pull request on GitHub, you \nmust\n write a\n    description which gives the context and/or explains why you are\n    creating it.\n\n\nThe pull request \nshould\n include tests.\n\n\nIf the pull request adds functionality, the docs \nshould\n be\n    updated.\n\n\nTravisCI\n integration tests should be \ngreen\n :) It will make\n    sure the tests pass with every supported version of Python.\n\n\n\n\nThank you!",
            "title": "Pull Request guidelines"
        },
        {
            "location": "/contributing/pr-guidelines/#pull-request-guidelines",
            "text": "nota bene  Open a pull-request even if your contribution is not ready yet! It can\nbe discussed and improved collaboratively! You may prefix the title of\nyour pull-request with \u201cWIP: \u201d to make it clear that it is not yet ready\nfor merging.   Before we merge a pull request, we check that it meets these guidelines:   Please, write  commit messages that make\n    sense ,\n    and  rebase your\n    branch  before\n    submitting your pull request.  One may ask you to  squash your\n    commits \n    too. This is used to \u201cclean\u201d your pull request before merging it (we\n    don\u2019t want commits such as fix tests, fix 2, fix 3, etc.).  While creating your pull request on GitHub, you  must  write a\n    description which gives the context and/or explains why you are\n    creating it.  The pull request  should  include tests.  If the pull request adds functionality, the docs  should  be\n    updated.  TravisCI  integration tests should be  green  :) It will make\n    sure the tests pass with every supported version of Python.   Thank you!",
            "title": "Pull request guidelines"
        },
        {
            "location": "/contributing/coc/",
            "text": "Contributor Code of Conduct\n\n\nAs contributors and maintainers of this project, we pledge to respect all\npeople who contribute through reporting issues, posting feature requests,\nupdating documentation, submitting pull requests or patches, and other\nactivities.\n\n\nWe are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, age, or religion.\n\n\nExamples of unacceptable behavior by participants include the use of sexual\nlanguage or imagery, derogatory comments or personal attacks, trolling, public\nor private harassment, insults, or other unprofessional conduct.\n\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct. Project maintainers who do not\nfollow the Code of Conduct may be removed from the project team.\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project\nmaintainers.\n\n\nThis Code of Conduct is adapted from the \nContributor Covenant\n, version 1.0.0, available at \nhttp://contributor-covenant.org/version/1/0/0/\n.",
            "title": "Code of Conduct"
        },
        {
            "location": "/contributing/coc/#contributor-code-of-conduct",
            "text": "As contributors and maintainers of this project, we pledge to respect all\npeople who contribute through reporting issues, posting feature requests,\nupdating documentation, submitting pull requests or patches, and other\nactivities.  We are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, age, or religion.  Examples of unacceptable behavior by participants include the use of sexual\nlanguage or imagery, derogatory comments or personal attacks, trolling, public\nor private harassment, insults, or other unprofessional conduct.  Project maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct. Project maintainers who do not\nfollow the Code of Conduct may be removed from the project team.  Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project\nmaintainers.  This Code of Conduct is adapted from the  Contributor Covenant , version 1.0.0, available at  http://contributor-covenant.org/version/1/0/0/ .",
            "title": "Contributor Code of Conduct"
        },
        {
            "location": "/faq/",
            "text": "Frequently Asked Questions\n\n\nCan I delete all my frames?\n\n\nYes! To do so, delete the \nframes\n file in your configuration folder (see \nconfiguration\n to find its location).",
            "title": "FAQ"
        },
        {
            "location": "/faq/#frequently-asked-questions",
            "text": "",
            "title": "Frequently Asked Questions"
        },
        {
            "location": "/faq/#can-i-delete-all-my-frames",
            "text": "Yes! To do so, delete the  frames  file in your configuration folder (see  configuration  to find its location).",
            "title": "Can I delete all my frames?"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\nWatson License (MIT)\n\n\nCopyright (c) 2015 Tailordev\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "",
            "title": "License"
        },
        {
            "location": "/about/license/#watson-license-mit",
            "text": "Copyright (c) 2015 Tailordev  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "Watson License (MIT)"
        },
        {
            "location": "/about/release-notes/",
            "text": "Release Notes\n\n\nThis document records all notable changes to Watson. This project adheres to\n\nSemantic Versioning\n.\n\n\n1.4.0 (2016-11-01)\n\n\n\n\nAdded: Watson now has a \nrename\n command (#74).\n\n\nAdded: the \nreport\n and \nlog\n commands now have new command line and\n  config file options to (not) include the current frame in the output (#123).\n\n\nAdded: the \nreport\n and \nlog\n commands now have new command line options to\n  set the timespan to the current year, month, week or day (#130 via #124).\n\n\nAdded: you can now set default tags for selected projects in the\n  config file (#113).\n\n\nAdded: Zsh completion support (#96)\n\n\nAdded: document installation via homebrew on OS X (#121)\n\n\nUpdated: when saving the Watson frames, state or config file, the most recent\n  previous version of the file is kept as a back up (#120).\n\n\nFixed: bash completion of projects and tags with spaces in them (#122).\n\n\nFixed: if saving the Watson frames, state or config file fails for any\n  reason, the original is kept (and not wiped as before) (#120).\n\n\n\n\n1.3.2 (2016-03-01)\n\n\n\n\nAdded: document installation for Arch Linux\n\n\nAdded: improve frame selection by position\n\n\nFixed: improve error handling\n\n\nFixed: remove unnecessary dependencies for a stand alone installation\n\n\nFixed: specify correct source directory for flake8 and pytest (tox test\nsuite)\n\n\n\n\n1.3.1 (2016-02-11)\n\n\n\n\nFix packaging error with PyPI\n\n\n\n\n1.3.0 (2016-02-11)\n\n\n\n\nAdd a complete browsable documentation\n\n\nAdd Watson\u2019s brand new logo!\n\n\nAdd support for Watson\u2019s directory override via the WATSON_DIR environment variable\n\n\n\n\n1.2.0 (2016-01-22)\n\n\n\n\nAdded: Watson now has a \nrestart\n command\n\n\nAdded: Watson now has a \nmerge\n command\n\n\nAdded: Watson can now stop running project when starting a new one (optional)\n\n\nAdded: there is a wrapper for \nRawConfigParser\n to make option access more convenient\n\n\nUpdated: the \nedit\n command now defaults to the running frame if any (else defaults to the last one)\n\n\nUpdated: the \nlog\n command now has a daily total time summary\n\n\nFixed: unicode issues with cjk characters\n\n\nFixed: edition summary is now converted to local time\n\n\n\n\n1.1.0 (2015-10-21)\n\n\n\n\nAdded: configurable date and time to output of \nstatus\n command (#33)\n\n\nAdded: support for Bash-completion (#1)\n\n\nAdded: new \nframes\n command that displays all frame IDs\n\n\nFixed: set id if not provided (#30)\n\n\n\n\n1.0.2 (2015-10-09)\n\n\n\n\nFix a bug where the last frame could not be deleted\n\n\nImprove installation instructions\n\n\nAdd an explanation to remove all the frames\n\n\n\n\n1.0.1 (2015-09-17)\n\n\n\n\nFix packaging error with PyPI\n\n\n\n\n1.0.0 (2015-09-17)\n\n\n\n\nFirst stable version",
            "title": "Release notes"
        },
        {
            "location": "/about/release-notes/#release-notes",
            "text": "This document records all notable changes to Watson. This project adheres to Semantic Versioning .",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#140-2016-11-01",
            "text": "Added: Watson now has a  rename  command (#74).  Added: the  report  and  log  commands now have new command line and\n  config file options to (not) include the current frame in the output (#123).  Added: the  report  and  log  commands now have new command line options to\n  set the timespan to the current year, month, week or day (#130 via #124).  Added: you can now set default tags for selected projects in the\n  config file (#113).  Added: Zsh completion support (#96)  Added: document installation via homebrew on OS X (#121)  Updated: when saving the Watson frames, state or config file, the most recent\n  previous version of the file is kept as a back up (#120).  Fixed: bash completion of projects and tags with spaces in them (#122).  Fixed: if saving the Watson frames, state or config file fails for any\n  reason, the original is kept (and not wiped as before) (#120).",
            "title": "1.4.0 (2016-11-01)"
        },
        {
            "location": "/about/release-notes/#132-2016-03-01",
            "text": "Added: document installation for Arch Linux  Added: improve frame selection by position  Fixed: improve error handling  Fixed: remove unnecessary dependencies for a stand alone installation  Fixed: specify correct source directory for flake8 and pytest (tox test\nsuite)",
            "title": "1.3.2 (2016-03-01)"
        },
        {
            "location": "/about/release-notes/#131-2016-02-11",
            "text": "Fix packaging error with PyPI",
            "title": "1.3.1 (2016-02-11)"
        },
        {
            "location": "/about/release-notes/#130-2016-02-11",
            "text": "Add a complete browsable documentation  Add Watson\u2019s brand new logo!  Add support for Watson\u2019s directory override via the WATSON_DIR environment variable",
            "title": "1.3.0 (2016-02-11)"
        },
        {
            "location": "/about/release-notes/#120-2016-01-22",
            "text": "Added: Watson now has a  restart  command  Added: Watson now has a  merge  command  Added: Watson can now stop running project when starting a new one (optional)  Added: there is a wrapper for  RawConfigParser  to make option access more convenient  Updated: the  edit  command now defaults to the running frame if any (else defaults to the last one)  Updated: the  log  command now has a daily total time summary  Fixed: unicode issues with cjk characters  Fixed: edition summary is now converted to local time",
            "title": "1.2.0 (2016-01-22)"
        },
        {
            "location": "/about/release-notes/#110-2015-10-21",
            "text": "Added: configurable date and time to output of  status  command (#33)  Added: support for Bash-completion (#1)  Added: new  frames  command that displays all frame IDs  Fixed: set id if not provided (#30)",
            "title": "1.1.0 (2015-10-21)"
        },
        {
            "location": "/about/release-notes/#102-2015-10-09",
            "text": "Fix a bug where the last frame could not be deleted  Improve installation instructions  Add an explanation to remove all the frames",
            "title": "1.0.2 (2015-10-09)"
        },
        {
            "location": "/about/release-notes/#101-2015-09-17",
            "text": "Fix packaging error with PyPI",
            "title": "1.0.1 (2015-09-17)"
        },
        {
            "location": "/about/release-notes/#100-2015-09-17",
            "text": "First stable version",
            "title": "1.0.0 (2015-09-17)"
        }
    ]
}